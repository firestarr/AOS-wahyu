import React, { useState, useEffect } from 'react';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';
import { Package, AlertTriangle, TrendingUp, TrendingDown, DollarSign, Calendar } from 'lucide-react';

const InventoryDashboardComponent = () => {
  // Mock data - in a real app, this would come from an API
  const [stockStats, setStockStats] = useState({
    totalItems: 156,
    lowStockItems: 12,
    outOfStockItems: 5,
    overStockItems: 8,
  });

  // Stock distribution data for pie chart
  const stockDistributionData = [
    { name: 'Normal Stock', value: stockStats.totalItems - stockStats.lowStockItems - stockStats.outOfStockItems - stockStats.overStockItems, color: '#10B981' },
    { name: 'Low Stock', value: stockStats.lowStockItems, color: '#F59E0B' },
    { name: 'Out of Stock', value: stockStats.outOfStockItems, color: '#EF4444' },
    { name: 'Over Stock', value: stockStats.overStockItems, color: '#6366F1' },
  ];

  // Inventory trend data
  const inventoryTrendData = [
    { name: 'Jan', inflow: 120, outflow: 65 },
    { name: 'Feb', inflow: 98, outflow: 87 },
    { name: 'Mar', inflow: 135, outflow: 105 },
    { name: 'Apr', inflow: 78, outflow: 112 },
    { name: 'May', inflow: 95, outflow: 76 },
    { name: 'Jun', inflow: 112, outflow: 94 },
  ];

  // Top Items by Value
  const topItemsByValue = [
    { name: 'Laptop Model X', value: 25600, category: 'Electronics', stock: 8 },
    { name: 'Office Chair Deluxe', value: 14400, category: 'Furniture', stock: 12 },
    { name: 'Premium Desk', value: 10800, category: 'Furniture', stock: 5 },
    { name: 'Smart Display 27"', value: 9600, category: 'Electronics', stock: 16 },
    { name: 'Wireless Headphones', value: 7200, category: 'Accessories', stock: 24 },
  ];

  // Mock recent transactions
  const recentTransactions = [
    { id: 1, date: '2023-06-15', item: 'Laptop Model X', type: 'IN', quantity: 5 },
    { id: 2, date: '2023-06-14', item: 'Office Chair Deluxe', type: 'OUT', quantity: 3 },
    { id: 3, date: '2023-06-13', item: 'Wireless Headphones', type: 'IN', quantity: 10 },
    { id: 4, date: '2023-06-12', item: 'Smart Display 27"', type: 'OUT', quantity: 2 },
    { id: 5, date: '2023-06-11', item: 'Premium Desk', type: 'IN', quantity: 3 },
  ];

  return (
    <div className="p-4 bg-gray-50">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div className="bg-white rounded-lg shadow p-4 flex items-center">
          <div className="bg-indigo-100 p-3 rounded-full">
            <Package className="h-6 w-6 text-indigo-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-500">Total Items</p>
            <p className="text-2xl font-semibold text-gray-900">{stockStats.totalItems}</p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-4 flex items-center">
          <div className="bg-amber-100 p-3 rounded-full">
            <AlertTriangle className="h-6 w-6 text-amber-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-500">Low Stock Items</p>
            <p className="text-2xl font-semibold text-gray-900">{stockStats.lowStockItems}</p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-4 flex items-center">
          <div className="bg-red-100 p-3 rounded-full">
            <TrendingDown className="h-6 w-6 text-red-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-500">Out of Stock</p>
            <p className="text-2xl font-semibold text-gray-900">{stockStats.outOfStockItems}</p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-4 flex items-center">
          <div className="bg-blue-100 p-3 rounded-full">
            <TrendingUp className="h-6 w-6 text-blue-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-500">Over Stock</p>
            <p className="text-2xl font-semibold text-gray-900">{stockStats.overStockItems}</p>
          </div>
        </div>
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* Stock Distribution Chart */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">Stock Distribution</h2>
            <p className="text-sm text-gray-500">Current inventory status distribution</p>
          </div>
          <div className="p-4 h-80">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={stockDistributionData}
                  cx="50%"
                  cy="50%"
                  labelLine={true}
                  outerRadius={100}
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {stockDistributionData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Inventory Trends Chart */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b border-gray-200">
            <h2 className="text-lg font-medium text-gray-900">Inventory Trends</h2>
            <p className="text-sm text-gray-500">Monthly inflows and outflows</p>
          </div>
          <div className="p-4 h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={inventoryTrendData}
                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar name="Inflow" dataKey="inflow" fill="#4F46E5" />
                <Bar name="Outflow" dataKey="outflow" fill="#F97316" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Bottom Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Top Items by Value */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b border-gray-200 flex justify-between items-center">
            <div>
              <h2 className="text-lg font-medium text-gray-900">Top Items by Value</h2>
              <p className="text-sm text-gray-500">Highest value inventory items</p>
            </div>
            <DollarSign className="h-5 w-5 text-gray-400" />
          </div>
          <div className="p-4">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {topItemsByValue.map((item, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.category}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.stock}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${item.value.toLocaleString()}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Recent Transactions */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b border-gray-200 flex justify-between items-center">
            <div>
              <h2 className="text-lg font-medium text-gray-900">Recent Transactions</h2>
              <p className="text-sm text-gray-500">Latest inventory movements</p>
            </div>
            <Calendar className="h-5 w-5 text-gray-400" />
          </div>
          <div className="p-4">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {recentTransactions.map((transaction) => (
                    <tr key={transaction.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(transaction.date).toLocaleDateString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {transaction.item}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {transaction.type === 'IN' ? (
                          <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                            <TrendingUp className="h-4 w-4 mr-1" />
                            IN
                          </span>
                        ) : (
                          <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                            <TrendingDown className="h-4 w-4 mr-1" />
                            OUT
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {transaction.quantity}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InventoryDashboardComponent;